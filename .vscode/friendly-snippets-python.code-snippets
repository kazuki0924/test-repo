// fetched from: https://github.com/rafamadriz/friendly-snippets via python script
{
  "#!/usr/bin/env pythonX": {
    "prefix": "fs-#env",
    "body": "#!/usr/bin/env python$0",
    "description": "Shebang line for the first python in PATH",
    "scope": "python"
  },
  "pyright ignore line": {
    "prefix": "fs-#ignore",
    "body": "# pyright: ignore[$0]",
    "description": "Ignore specific line diagnostic in pyright (ignore all is unsafe)",
    "scope": "python"
  },
  "Multiline string": {
    "prefix": "fs-#",
    "body": [
      "\"\"\"$0",
      "\"\"\""
    ],
    "description": "Snippet to avoid autopair plugin annoyances when typing multiple \"",
    "scope": "python"
  },
  "One-line multiline string": {
    "prefix": "fs-##",
    "body": "\"\"\"$0\"\"\"",
    "description": "Snippet to avoid autopair plugin annoyances when typing multiple \"",
    "scope": "python"
  },
  "self": {
    "prefix": "fs-s",
    "body": "self.$0",
    "description": "Snippet to reference the self property in an object",
    "scope": "python"
  },
  "__magic__": {
    "prefix": "fs-__",
    "body": "__${1:init}__$0",
    "description": "Create magic method",
    "scope": "python"
  },
  "if __name__ == __main__": {
    "prefix": "fs-ifmain",
    "body": [
      "if __name__ == \"__main__\":",
      "\t${1:main()}"
    ],
    "description": "Execute code if the file is executed directly",
    "scope": "python"
  },
  "import": {
    "prefix": "fs-import",
    "body": "import ${1:datetime}",
    "description": "Import a package or module",
    "scope": "python"
  },
  "from ... import ...": {
    "prefix": "fs-fromim",
    "body": "from ${1:pathlib} import ${2:Path}",
    "description": "Import individual objects directly into the caller\u2019s symbol table",
    "scope": "python"
  },
  "if": {
    "prefix": "fs-if",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}"
    ],
    "description": "if statement",
    "scope": "python"
  },
  "elif": {
    "prefix": "fs-elif",
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "elif statement",
    "scope": "python"
  },
  "else": {
    "prefix": "fs-else",
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "else statement",
    "scope": "python"
  },
  "if/else": {
    "prefix": "fs-ifelse",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "if statement with else",
    "scope": "python"
  },
  "match/case": {
    "prefix": "fs-match",
    "body": [
      "match ${1:expression}:",
      "\tcase ${2:pattern}:",
      "\t\t${3:pass}"
    ],
    "description": "match/case statements",
    "scope": "python"
  },
  "case": {
    "prefix": "fs-case",
    "body": [
      "case ${2:pattern}:",
      "\t${3:pass}"
    ],
    "description": "case block",
    "scope": "python"
  },
  "case wildcard": {
    "prefix": "fs-casew",
    "body": [
      "case _:",
      "\t${1:pass}"
    ],
    "description": "case wildcard block if other cases fail",
    "scope": "python"
  },
  "while": {
    "prefix": "fs-while",
    "body": [
      "while ${1:condition}:",
      "\t${2:pass}"
    ],
    "description": "while loop",
    "scope": "python"
  },
  "for": {
    "prefix": "fs-for",
    "body": [
      "for ${1:value} in ${2:iterable}:",
      "\t${3:pass}"
    ],
    "description": "for loop",
    "scope": "python"
  },
  "for w/ range": {
    "prefix": "fs-forr",
    "body": [
      "for ${1:value} in range($2):",
      "\t${3:pass}"
    ],
    "description": "for loop that iterates over range of integers",
    "scope": "python"
  },
  "with": {
    "prefix": "fs-with",
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "'with' statement",
    "scope": "python"
  },
  "lambda": {
    "prefix": "fs-lambda",
    "body": [
      "lambda ${1:parameter_list}: ${2:expression}"
    ],
    "description": "lambda statement",
    "scope": "python"
  },
  "Function": {
    "prefix": "fs-def",
    "body": [
      "def ${1:fname}($2):",
      "\t${3:pass}"
    ],
    "description": "Function definition",
    "scope": "python"
  },
  "Function w/ return type": {
    "prefix": "fs-deft",
    "body": [
      "def ${1:fname}($2) -> ${3:None}:",
      "\t${4:pass}"
    ],
    "description": "Function definition with return type",
    "scope": "python"
  },
  "class": {
    "prefix": "fs-class",
    "body": [
      "class ${1:classname}:",
      "\t${2:pass}"
    ],
    "description": "Class definition",
    "scope": "python"
  },
  "Derived class": {
    "prefix": "fs-classd",
    "body": [
      "class ${1:classname}($2):",
      "\t${3:pass}"
    ],
    "description": "Class definition with inheritance",
    "scope": "python"
  },
  "class template": {
    "prefix": "fs-classi",
    "body": [
      "class ${1:ClassName}($2):",
      "\t\"\"\"${3:docstring for $1.}\"\"\"",
      "\tdef __init__(self, ${4:arg}):",
      "\t\t${5:super($1, self).__init__()}",
      "\t\tself.$4 = $4$0"
    ],
    "description": "Class definition template",
    "scope": "python"
  },
  "Method": {
    "prefix": "fs-defs",
    "body": [
      "def ${1:mname}(self$2):",
      "\t${3:pass}"
    ],
    "description": "Class method definition",
    "scope": "python"
  },
  "Method w/ return type": {
    "prefix": "fs-defst",
    "body": [
      "def ${1:mname}(self$2) -> ${3:None}:",
      "\t${4:pass}"
    ],
    "description": "Class method definition",
    "scope": "python"
  },
  "property template": {
    "prefix": "fs-property",
    "body": [
      "@property",
      "def ${1:pname}(self):",
      "\t\"\"\"${2:The $1 property.}\"\"\"",
      "\t${3:return self._$1}",
      "",
      "@${4:$1}.setter",
      "def ${5:$1}(self, value):",
      "\t${6:self._$1} = value"
    ],
    "description": "New property: get and set via decorator",
    "scope": "python"
  },
  "except": {
    "prefix": "fs-except",
    "body": [
      "except$1:",
      "\t${2:pass}"
    ],
    "description": "except statement",
    "scope": "python"
  },
  "except as": {
    "prefix": "fs-exceptas",
    "body": [
      "except ${1:Exception} as ${2:e}:",
      "\t${3:raise $2}"
    ],
    "description": "'except as' statement",
    "scope": "python"
  },
  "try/except": {
    "prefix": "fs-try",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}"
    ],
    "description": "try/except blocks",
    "scope": "python"
  },
  "try/except/else": {
    "prefix": "fs-trya",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "else:",
      "\t${5:pass}"
    ],
    "description": "try/except/else blocks",
    "scope": "python"
  },
  "try/except/finally": {
    "prefix": "fs-tryf",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:Exception} as ${3:e}:",
      "\t${4:raise $3}",
      "finally:",
      "\t${5:pass}"
    ],
    "description": "try/except/finally blocks",
    "scope": "python"
  },
  "try/except/else/finally": {
    "prefix": "fs-tryef",
    "body": [
      "try:",
      "\t${1:pass}",
      "except${2: ${3:Exception} as ${4:e}}:",
      "\t${5:raise}",
      "else:",
      "\t${6:pass}",
      "finally:",
      "\t${7:pass}"
    ],
    "description": "try/except/else/finally blocks",
    "scope": "python"
  },
  "Jupyter cell": {
    "prefix": "fs-#cell",
    "body": "# %%",
    "description": "Add a new cell",
    "scope": "python"
  },
  "Jupyter markdown cell": {
    "prefix": "fs-#mark",
    "body": "# %% [markdown]",
    "description": "Add a new markdown cell",
    "scope": "python"
  }
}